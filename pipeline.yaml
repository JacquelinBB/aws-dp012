name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Acione o pipeline sempre que houver um push na branch "main"

jobs:
  build_and_push_image:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      # 1. Faça o checkout do código do repositório
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Faça login no Amazon ECR
      - name: Login to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region ca-central-1 | docker login --username AWS --password-stdin 325583868777.dkr.ecr.ca-central-1.amazonaws.com

      # 3. Construa a imagem Docker
      - name: Build Docker Image
        run: |
          docker build -t dp012-app:latest .
          docker tag dp012-app:latest 325583868777.dkr.ecr.ca-central-1.amazonaws.com/dp012-app-repo:latest

      # 4. Envie a imagem para o ECR
      - name: Push Docker Image to ECR
        run: |
          docker push 325583868777.dkr.ecr.ca-central-1.amazonaws.com/dp012-app-repo:latest

  update_kubernetes_deployment:
    name: Update Kubernetes Deployment
    needs: build_and_push_image
    runs-on: ubuntu-latest

    steps:
      # 1. Configure o kubectl para acessar o cluster EKS
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # 2. Atualize o Deployment no Kubernetes
      - name: Update Kubernetes Deployment
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws eks update-kubeconfig --region ca-central-1 --name EKSDeepDive
          kubectl set image deployment/dp012-app-deployment dp012-app=<aws_account_id>.dkr.ecr.ca-central-1.amazonaws.com/dp012-app-repo:latest
